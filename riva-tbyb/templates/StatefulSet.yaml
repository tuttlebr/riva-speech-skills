{{- $root := . }}
{{- $artifacturl := "" }}
{{- $image_version := "" }}
{{- $model_version := "" }}
{{- $client_image := "" }}
{{- $server_image := "" }}
{{- $servicemaker_image := "" }}
{{- if (ne (len .Values.riva_ngc_team) 0) }}
{{- $artifacturl = printf "%s/%s" .Values.riva_ngc_org .Values.riva_ngc_team }}
{{- else }}
{{- $artifacturl = printf "%s" .Values.riva_ngc_org }}
{{- end }}
{{- $image_version = printf "%s" .Values.riva_ngc_image_version }}
{{- $model_version = printf "%s" .Values.riva_ngc_model_version }}
{{- if .Values.raw_server_image }}
{{- $server_image = printf "%s" .Values.raw_server_image }}
{{- $client_image = printf "%s" .Values.raw_client_image }}
{{- else }}
{{- $server_image = printf "%s/%s/%s:%s-server" .Values.imageurl $artifacturl .Values.riva.speechImageName $image_version }}
{{- $client_image = printf "%s/%s/%s-client:%s" .Values.imageurl $artifacturl .Values.riva.speechImageName $image_version }}
{{- end }}
{{- if .Values.raw_servicemaker_image }}
{{- $servicemaker_image = printf "%s" .Values.raw_servicemaker_image }}
{{- else }}
{{- $servicemaker_image = printf "%s/%s/%s:%s-servicemaker" .Values.imageurl $artifacturl .Values.modelRepoGenerator.imageName $image_version }}
{{- end }}


apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "riva-server.fullname" . }}-frontend
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/instance: {{ template "riva-server.fullname" . }}
    chart: {{ template "riva-server.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    type: {{ template "riva-server.fullname" . }}-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ template "riva-server.fullname" . }}
      release: {{ .Release.Name }}
  serviceName: {{ template "riva-server.name" . }}-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ template "riva-server.fullname" . }}
        release: {{ .Release.Name }}
        type: {{ template "riva-server.fullname" . }}-frontend
    spec:
      containers:
        - name: riva-speech-redis
          image: redis
          imagePullPolicy: {{ .Values.riva.pullPolicy }}
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"

        - name: riva-speech-redis-commander
          image: rediscommander/redis-commander
          imagePullPolicy: {{ .Values.riva.pullPolicy }}
          env:
            - name: REDIS_HOSTS
              value: "redis://0.0.0.0:6379"
          ports:
            - name: redis-commander
              containerPort: 8081
              protocol: TCP
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
        - name: riva-speech-assistant
          image: {{ .Values.assistant.image }}
          imagePullPolicy: Always
          env:
            - name: WEATHERSTACK_ACCESS_KEY
              value: {{ .Values.assistant.weatherStackAPIKey }}
            - name: EXPRESS_SECRET
              value: "gVkYp3s6"
            - name: RIVA_API_URL
              value: "{{ template "riva-server.fullname" . }}-traefik.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.traefik.ports.tritonriva.exposedPort }}"
            - name: REDIS_URL
              value: "redis://0.0.0.0:6379"
            - name: NODE_ENV
              value: "dev"
            - name: ASR_LANGS
              value: {{ quote .Values.modelRepoGenerator.ngcModelConfigs.asr_langs }}
            - name: TTS_VOICES
              value: {{ quote .Values.modelRepoGenerator.ngcModelConfigs.tts_voices }}
            - name: RIVA_NER_MODEL
              value: "riva_ner"
            - name: RIVA_NER_ENTITIES
              value: "per,loc,org,time,misc"
            - name: PEERJS_PORT
              value: "9000"
            - name: PORT
              value: "8015"
            - name: METRICS_PORT
              value: "8016"
          ports:
            - containerPort: 8015
              name: assistant
              protocol: TCP
            - containerPort: 9000
              name: peer
              protocol: TCP
          resources:
            requests:
              memory: "64Mi"
              cpu: "250m"
            limits:
              memory: "128Mi"
              cpu: "500m"
          # args:
          #   - node
          #   - server.js
      imagePullSecrets:
        - name: imagepullsecret
      initContainers:
        - name: init-riva-speech-assistant
          image: busybox:1.28
          command: ['sh', '-c', 'until nslookup {{ template "riva-server.fullname" . }}-{{ sub .Values.autoscaling.minReplicas 1 }}.{{ template "riva-server.fullname" . }}.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for {{ template "riva-server.fullname" . }} server instance.; sleep 2; done']
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "riva-server.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/instance: {{ template "riva-server.fullname" . }}
    chart: {{ template "riva-server.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    type: {{ template "riva-server.fullname" . }}
  annotations:
    prometheus.io/path: "/metrics"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8002"
spec:
  replicas: {{ .Values.autoscaling.minReplicas }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ template "riva-server.fullname" . }}
      release: {{ .Release.Name }}
  serviceName: {{ template "riva-server.name" . }}
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ template "riva-server.fullname" . }}
        release: {{ .Release.Name }}
    spec:
    {{- if .Values.riva.useAffinity }}
    {{- with .Values.riva.affinity }}
      affinity:
        {{- toYaml . | nindent 12 }}
    {{- end }}
    {{- end }}
      containers:
        - name: riva-speech-api
          image: {{ $server_image }}
          imagePullPolicy: {{ .Values.riva.pullPolicy }}
        {{- with .Values.riva.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
        {{- end }}
          command: ["/opt/riva/bin/start-riva"]
          args:
            {{- range $service, $enabled := .Values.riva.speechServices }}
            - "--{{$service}}_service={{$enabled}}"
            {{- end }}
          env:
            - name: TRTIS_MODEL_STORE
              value: "/data/models"
            - name: LD_PRELOAD
              value: "{{- join ":" .Values.riva.trtPlugins }}"
          ports:
            - containerPort: 50051
              name: riva-grpc
            - containerPort: 8000
              name: http
            - containerPort: 8001
              name: grpc
            - containerPort: 8002
              name: metrics
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
            initialDelaySeconds: 5
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
            initialDelaySeconds: 10
          startupProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:50051"]
            initialDelaySeconds: 10
            failureThreshold: 12
            periodSeconds: 10
          volumeMounts:
            - mountPath: /data/
              name: workdir
      imagePullSecrets:
        - name: imagepullsecret
      initContainers:
        - name: init-riva-speech-api
          image: {{ $servicemaker_image }}
          imagePullPolicy: {{ .Values.modelRepoGenerator.pullPolicy }}
        {{- with .Values.riva.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
        {{- end }}
          volumeMounts:
            - name: artifact-volume
              mountPath: /rmir
            - name: workdir
              mountPath: /data/
          command:
            - download_and_deploy_ngc_models
            {{- if .Values.modelRepoGenerator.overwriteRMIRS }}
            - "-d"
            {{- end }}
            {{- if .Values.modelRepoGenerator.overwriteModels }}
            - "-x"
            {{- end }}
            {{- if .Values.riva.speechServices.asr }}
            {{- range .Values.modelRepoGenerator.ngcModelConfigs.asr }}
            - "{{ $artifacturl }}/{{ . }}:{{ $model_version }}"
            {{- end }}
            {{- end }}
            {{- if .Values.riva.speechServices.nlp }}
            {{- range .Values.modelRepoGenerator.ngcModelConfigs.nlp }}
            - "{{ $artifacturl }}/{{ . }}:{{ $model_version }}"
            {{- end }}
            {{- end }}
            {{- if .Values.riva.speechServices.tts }}
            {{- range .Values.modelRepoGenerator.ngcModelConfigs.tts }}
            - "{{ $artifacturl }}/{{ . }}:{{ $model_version }}"
            {{- end }}
            {{- end }}
          env:
            - name: NGC_CLI_ORG
              value: "nvidia"
            - name: NGC_CLI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.modelRepoGenerator.ngcSecret }}
                  key: apikey
            - name: MODEL_DEPLOY_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.modelRepoGenerator.modelDeploySecret }}
                  key: key
      volumes:
        - name: artifact-volume
          persistentVolumeClaim:
            claimName: {{ .Values.riva.volume.persistentVolumeClaim }}-artifact-volume
        - name: workdir
          persistentVolumeClaim:
            claimName: {{ .Values.riva.volume.persistentVolumeClaim }}-workdir